name: CI/CD Pipeline

# Trigger the workflow on pushes to the main branch and on pull requests
on:
  push:
    branches:
      - master  # Assuming you're using master now
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (for advanced Docker build support)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Install Docker Compose (fix for "docker-compose: command not found" error)
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Step 4: Build the echo-server Docker image (common image for both echo-server-a and echo-server-b)
    - name: Build echo-server image
      run: docker build -t echo-server .

    # Step 5: Run docker-compose to spin up the containers and run services
    - name: Run docker-compose
      run: docker-compose up -d --build

    # Step 6: Test the services by sending HTTP requests and checking the response
    - name: Test echo-server-a (port 8081)
      run: |
        echo "Testing echo-server-a"
        response=$(curl -s http://localhost:8081)
        if [[ "$response" != "Hello from A" ]]; then
          echo "Test failed for echo-server-a! Expected 'Hello from A' but got: $response"
          exit 1
        fi
        echo "Test passed for echo-server-a!"

    - name: Test echo-server-b (port 8082)
      run: |
        echo "Testing echo-server-b"
        response=$(curl -s http://localhost:8082)
        if [[ "$response" != "Hello from B" ]]; then
          echo "Test failed for echo-server-b! Expected 'Hello from B' but got: $response"
          exit 1
        fi
        echo "Test passed for echo-server-b!"

    # Step 7: Test reverse proxy routing for each service
    - name: Test reverse-proxy for echo-server-a (/a route)
      run: |
        echo "Testing reverse-proxy for echo-server-a (/a route)"
        response=$(curl -s http://localhost:8080/a)
        if [[ "$response" != "Hello from A" ]]; then
          echo "Test failed for reverse-proxy route '/a'! Expected 'Hello from A' but got: $response"
          exit 1
        fi
        echo "Test passed for reverse-proxy route '/a'!"

    - name: Test reverse-proxy for echo-server-b (/b route)
      run: |
        echo "Testing reverse-proxy for echo-server-b (/b route)"
        response=$(curl -s http://localhost:8080/b)
        if [[ "$response" != "Hello from B" ]]; then
          echo "Test failed for reverse-proxy route '/b'! Expected 'Hello from b' but got: $response"
          exit 1
        fi
        echo "Test passed for reverse-proxy route '/b'!"

    # Step 8: Clean up - Stop and remove the Docker containers
    - name: Stop and remove Docker containers
      run: docker-compose down

